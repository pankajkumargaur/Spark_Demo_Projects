package SparkSql

/**
  * Created by Pankaj Gaur on 22-07-2020.
  */

import org.apache.spark.sql.SparkSession
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.sql._
import org.apache.spark.sql.types.{IntegerType, StringType, StructField, StructType}

object AdharCard_Analysis {
    def main(args: Array[String]) {
      val spark = SparkSession.builder.master("local[*]").appName("adharcard").getOrCreate()

      val data = "E:\\work\\datasets\\UIDAI-ENR-DETAIL-20170308.csv"
      val opt = Map("InferSchema" -> "false", "header" -> "true")

      val schema = StructType(Array
      ( StructField("Registrar", StringType, true),
        StructField("EnrolmentAgency", StringType, true),
        StructField("State", StringType, true),
        StructField("District", StringType, true),
        StructField("SubDistrict", StringType, true),
        StructField("PinCode", StringType, true),
        StructField("Gender", StringType, true),
        StructField("Age", IntegerType, true),
        StructField("AadharGenerated", IntegerType, true),
        StructField("EnrolmentRejected", IntegerType, true),
        StructField("EmailProvided", IntegerType, true),
        StructField("MobileNumProvided", IntegerType, true)

      ))

      val dfuidai =  spark.read.format(source = "CSV").options(opt).schema(schema).load(data)
      dfuidai.createOrReplaceTempView("tab")

      dfuidai.printSchema()
      //dfuidai.show()

      //1. How many male and femail available in each district display in desc order.
      val result =  spark.sql("select  district, gender" +
        ",count(gender) as gendercount " +
        "from tab group by district, gender order by gendercount desc")

      result.show()
      val result2 = spark.sql("select *,   CASE WHEN AGE >= 1 and AGE <= 10  THEN \"1-10\"\n         " +
        "WHEN AGE > 10 and AGE <= 20 THEN \"11-20\"\n        " +
        "WHEN AGE > 20 and AGE <= 30 THEN \"21-30\"\n        " +
        "WHEN AGE > 30 and AGE <= 40 THEN \"31-40\"\n        " +
        "WHEN AGE > 40 and AGE <= 50 THEN \"41-50\"\n        " +
        "WHEN AGE > 50 and AGE <= 60 THEN \"51-60\"\n        " +
        "WHEN AGE > 60 and AGE <= 70 THEN \"61-70\"\n        " +
        "WHEN AGE > 70 and AGE <= 80 THEN \"71-80\"\n        " +
        "WHEN AGE > 80 and AGE <= 90 THEN \"81-90\"\n        " +
        "WHEN AGE > 90 and AGE <= 100 THEN \"91-100\"\n      " +
        "WHEN AGE > 100 and AGE <= 110 THEN \"101-110\"\n    " +
        "ELSE \"Above 110\"  END AS agerange from tab ")
      result2.show()


      //2. add one more column in that column group the age between range (1-10, 11-20,21-30,31,-40... like this)


      //3. means how many members between that age range
      result2.createOrReplaceTempView("tab1")
      spark.sql("select  agerange, count(*) as count from tab1 group by agerange order by count desc").show()


      //4.How many members not successfully verified by mobile. 0 means not yet, 1 means yes
      spark.sql("select count(*)  from tab where MobileNumProvided = 0 ").show()


      //5.In which area(pincode) most of the members have aadhar card. where low aadhar card members available.?
      spark.sql("select pincode, sum(AadharGenerated) as total from tab group by  pincode  order by total desc limit 1").show()
      spark.sql("select pincode, sum(AadharGenerated) as total from tab group by  pincode  order by total  limit 1").show()

      // out5.agg(max(out5.columns(1)), min(out5.columns(1)) ).show

      //6- each state how many members available in desc order.
      spark.sql("SELECT state, SUM(AadharGenerated) AS TotalAadharCount " +
        "FROM tab GROUP BY state " +
        "ORDER BY TotalAadharCount DESC").show()

      // pending ---- saving to hive result set


      //https://github.com/varunu28/AADHAR-Dataset-Analysis/blob/master/src/main/scala/Analysis.scala

      // Count the number of identities(Aadhaar) generated by each Enrollment Agency and Get Top 3 agencies
      spark.sql("SELECT EnrolmentAgency, SUM(AadharGenerated) AS TotalAadharCount " +
        "FROM tab GROUP BY EnrolmentAgency " +
        "ORDER BY TotalAadharCount DESC LIMIT 3").show()

      // Top 10 districts with maximum identities generated for both Male and Female
      spark.sql("SELECT temp.District, SUM(temp.AadharGenerated) AS TotalAadharCount " +
        "FROM  (SELECT * from tab WHERE gender NOT IN ('T')) as temp " +
        "GROUP BY District " +
        "ORDER BY TotalAadharCount DESC LIMIT 10").show()

      // Top 3 States With maximum identities generated for Female
      spark.sql("SELECT state, count(*) as num " +
        "FROM(SELECT * FROM tab WHERE Gender = 'F') " +
        "GROUP BY state ORDER BY num DESC LIMIT 3 ").show()


      spark.stop()
    }

  }
